From 7c4dfd7779cc6e6a7c21e5df6748553aa37c5860 Mon Sep 17 00:00:00 2001
From: "Rodney, Tiara" <tiara.rodney@administratrix.de>
Date: Tue, 15 Apr 2025 14:42:17 +0200
Subject: [PATCH 1/3] refactor(languages/python): adapt scripts path resolution

Cygwin isn't the only edge-case for a differing bin/ path. In addition there
also is MSYS2, which behaves differently than Cygwin. CPython compiled against
Microsoft Visual C++ Runtime (MSVCRT) through MinGW, will correctly identify as
an 'nt' platform, yet will prefer a POSIX path scheme.

In order to avoid having to patch every edge-case, we can spy on the system
configurations install paths through the `sysconfig` module and get the basename
of the global scripts path, which will be returned in accordance with the
preferred install path scheme of the system/platform.

Fixes: https://github.com/pre-commit/pre-commit/issues/3448
---
 pre_commit/languages/python.py | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/pre_commit/languages/python.py b/pre_commit/languages/python.py
index 88ececc..6383945 100644
--- a/pre_commit/languages/python.py
+++ b/pre_commit/languages/python.py
@@ -4,8 +4,10 @@ import contextlib
 import functools
 import os
 import sys
+import sysconfig
 from collections.abc import Generator
 from collections.abc import Sequence
+from pathlib import Path
 
 import pre_commit.constants as C
 from pre_commit import lang_base
@@ -46,10 +48,9 @@ def _read_pyvenv_cfg(filename: str) -> dict[str, str]:
     return ret
 
 
-def bin_dir(venv: str) -> str:
+def bin_dir(venv: str) -> Path:
     """On windows there's a different directory for the virtualenv"""
-    bin_part = 'Scripts' if sys.platform == 'win32' else 'bin'
-    return os.path.join(venv, bin_part)
+    return Path(venv) / Path(sysconfig.get_path('scripts')).name
 
 
 def get_env_patch(venv: str) -> PatchesT:
-- 
2.47.1


From 0d50ffc2b75c0129540bff4fe1d83b2c3a682e64 Mon Sep 17 00:00:00 2001
From: "Rodney, Tiara" <tiara.rodney@administratrix.de>
Date: Tue, 15 Apr 2025 15:12:07 +0200
Subject: [PATCH 2/3] refactor(languages/node): adapt scripts path resolution

Cygwin isn't the only edge-case for a differing bin/ path. In addition there
also is MSYS2, which behaves differently than Cygwin. CPython compiled against
Microsoft Visual C++ Runtime (MSVCRT) through MinGW, will correctly identify as
an 'nt' platform, yet will prefer a POSIX path scheme.

In order to avoid having to patch every edge-case, we can spy on the system
configurations install paths through the `sysconfig` module and get the basename
of the global scripts path, which will be returned in accordance with the
preferred install path scheme of the system/platform.

Fixes: https://github.com/pre-commit/pre-commit/issues/3448
---
 pre_commit/languages/node.py | 23 +++++++++++++----------
 1 file changed, 13 insertions(+), 10 deletions(-)

diff --git a/pre_commit/languages/node.py b/pre_commit/languages/node.py
index af7dc6f..5953bdd 100644
--- a/pre_commit/languages/node.py
+++ b/pre_commit/languages/node.py
@@ -4,6 +4,7 @@ import contextlib
 import functools
 import os
 import sys
+import sysconfig
 from collections.abc import Generator
 from collections.abc import Sequence
 
@@ -37,16 +38,18 @@ def get_default_version() -> str:
 
 
 def get_env_patch(venv: str) -> PatchesT:
-    if sys.platform == 'cygwin':  # pragma: no cover
-        _, win_venv, _ = cmd_output('cygpath', '-w', venv)
-        install_prefix = fr'{win_venv.strip()}\bin'
-        lib_dir = 'lib'
-    elif sys.platform == 'win32':  # pragma: no cover
-        install_prefix = bin_dir(venv)
-        lib_dir = 'Scripts'
-    else:  # pragma: win32 no cover
+
+    install_prefix = bin_dir(venv)
+    lib_dir = 'lib'
+
+    # if not a Cygwin platform and not a win32 platform with a Windows path scheme
+    # catering to the previously defined edge-cases.
+    if sys.platform != 'cygwin' and (sys.platform == 'win32' and install_prefix.name != 'Scripts'):
         install_prefix = venv
-        lib_dir = 'lib'
+
+    if install_prefix.name != 'bin':
+        lib_dir = install_prefix.name
+
     return (
         ('NODE_VIRTUAL_ENV', venv),
         ('NPM_CONFIG_PREFIX', install_prefix),
@@ -54,7 +57,7 @@ def get_env_patch(venv: str) -> PatchesT:
         ('NPM_CONFIG_USERCONFIG', UNSET),
         ('npm_config_userconfig', UNSET),
         ('NODE_PATH', os.path.join(venv, lib_dir, 'node_modules')),
-        ('PATH', (bin_dir(venv), os.pathsep, Var('PATH'))),
+        ('PATH', (install_prefix, os.pathsep, Var('PATH'))),
     )
 
 
-- 
2.47.1


From c68a3ba59f7231c076aa034685ef48481ac6138b Mon Sep 17 00:00:00 2001
From: "Rodney, Tiara" <tiara.rodney@administratrix.de>
Date: Tue, 15 Apr 2025 15:22:30 +0200
Subject: [PATCH 3/3] refactor(languages/conda): adapt scripts path resolution

Cygwin isn't the only edge-case for a differing bin/ path. In addition there
also is MSYS2, which behaves differently than Cygwin. CPython compiled against
Microsoft Visual C++ Runtime (MSVCRT) through MinGW, will correctly identify as
an 'nt' platform, yet will prefer a POSIX path scheme.

In order to avoid having to patch every edge-case, we can spy on the system
configurations install paths through the `sysconfig` module and get the basename
of the global scripts path, which will be returned in accordance with the
preferred install path scheme of the system/platform.

Fixes: https://github.com/pre-commit/pre-commit/issues/3448
---
 pre_commit/languages/conda.py | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/pre_commit/languages/conda.py b/pre_commit/languages/conda.py
index d397ebe..1531d38 100644
--- a/pre_commit/languages/conda.py
+++ b/pre_commit/languages/conda.py
@@ -12,6 +12,7 @@ from pre_commit.envcontext import PatchesT
 from pre_commit.envcontext import SubstitutionT
 from pre_commit.envcontext import UNSET
 from pre_commit.envcontext import Var
+from pre_commit.languages.python import bin_dir
 from pre_commit.prefix import Prefix
 from pre_commit.util import cmd_output_b
 
@@ -26,10 +27,9 @@ def get_env_patch(env: str) -> PatchesT:
     # they can be in $CONDA_PREFIX/bin, $CONDA_PREFIX/Library/bin,
     # $CONDA_PREFIX/Scripts and $CONDA_PREFIX. Whereas the latter only
     # seems to be used for python.exe.
-    path: SubstitutionT = (os.path.join(env, 'bin'), os.pathsep, Var('PATH'))
+    path: SubstitutionT = (str(bin_dir(env)), os.pathsep, Var('PATH'))
     if sys.platform == 'win32':  # pragma: win32 cover
         path = (env, os.pathsep, *path)
-        path = (os.path.join(env, 'Scripts'), os.pathsep, *path)
         path = (os.path.join(env, 'Library', 'bin'), os.pathsep, *path)
 
     return (
-- 
2.47.1

